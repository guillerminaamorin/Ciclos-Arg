# -*- coding: utf-8 -*-
"""argenistan_ciclos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FbkE9J_B-FbkXBj2Uw_RxXdiLN7f8yC5
"""

#pip install yfinance

import yfinance as yf, pandas as pd, matplotlib.pyplot as plt, statistics as st
from datetime import datetime as date

plt.rcParams['figure.dpi'] = 100
plt.style.use('dark_background')
long_ciclo = 1000

tickers = ['^MERV', 'GGAL', 'GGAL.BA','TGS','YPF','CRESY','IRS']
data = yf.download(tickers, auto_adjust=True, start='1999-01-01')['Close']
data = data.fillna(method='bfill')
data['CCL'] = (data['GGAL.BA']/data['GGAL']*10).rolling(10).mean()
data['MERV_CCL'] = data['^MERV'] / data['CCL']

aths_hist = { 'MERV_CCL': [date(2000,3,3), date(2007,6,18), date(2018,1,31) ],
              'GGAL' : [date(2001,1,23), date(2007,2,20), date(2018,1,31)],
              'IRS' : [date(2000,3,16), date(2007,5,23), date(2018,1,4)],
              'TGS' : [date(2000,7,14), date(2007,7,5), date(2017,12,20)],
              'YPF' : [date(2000,8,23), date(2011,1,6), date(2018,1,24)],
              'CRESY' : [date(1999,5,5), date(2007,11,6), date(2017,11,17)] }

rows, cols = 2, 3
fig, ax = plt.subplots(figsize=(14,7), ncols=cols, nrows=rows)
series, dd, ppc_ppv = {}, {}, {}
for j, ticker in enumerate(aths_hist.keys()):
    series[ticker] = pd.DataFrame()
    for i in range(3):
        start = aths_hist[ticker][i]
        df = data[ticker].loc[data.index >= start].iloc[:long_ciclo] / data[ticker].loc[start] *100
        series[ticker] = pd.concat([series[ticker], df.reset_index(drop=True)], axis=1)
    
    series[ticker].columns = ['2000 / 2003','2008 / 2011','2018 / 2021']
    dd[ticker] = series[ticker].min()
    ppc = (700-400) / ((1/(series[ticker].iloc[400:700])).sum())
    ppv = series[ticker].iloc[800:1000].mean()
    ppc_ppv[ticker] = pd.concat([ppc,ppv],axis=1)
    row, col = j//cols, j%cols
    series[ticker].plot(lw=.6, color=['red','pink','lightblue'], ax=ax[row][col])
    ax[row][col].legend(loc='lower left', fontsize=9)
    ax[row][col].set_title(ticker, y=0.75, fontsize=36, color=(1,1,1,0.2))
    ax[row][col].tick_params(axis='y', left=False, right=False, labelleft=False) 
    ax[row][col].set_xlabel('Ruedas desde pico')

plt.subplots_adjust(wspace=0, hspace=0)
plt.suptitle('Ciclos de Argenistan (comparación base 100 inicio ciclo)', fontsize=20, y=0.95)

dd = (pd.concat(dd, axis=1)-100).round(2)
print('drawdowns en cada ciclo (% Caídas desde max anterior)')
dd

print('Estrategia comprar con DCA entre ruedas 400-700 \
      \nVender precio medio entre las ruedas 800 y 1000 \n')
ppc_base_100 = pd.concat(ppc_ppv, axis=1).swaplevel(0,1, axis=1)[0]
ppv_base_100 = pd.concat(ppc_ppv, axis=1).swaplevel(0,1, axis=1)[1]
estr_prom = ((ppv_base_100 / ppc_base_100 -1)*100).round()
estr_prom

print('Ganancia %  Ciclo 2018/2021 \
        \nEstrategia comprar con DCA entre ruedas 400-700, \
        \nVender asumiendo que recupera la mitad del ATH previo \n')

estr_50pct_ATH = ((50 / ppc_base_100.loc['2018 / 2021'] -1)*100).round()
estr_50pct_ATH

print('Ganancia % Estrategia comprar con DCA entre ruedas 400-700 \
      \nVender asumiendo que recupera ATH previo (ponele)\n')

estr_max = ((100 / ppc_base_100.loc['2018 / 2021'] -1)*100).round()
estr_max

print('Pisos de ciclo, Precios mínimos Base ATH=100')
dd+100

print('Precio promedio de compra: PPC, comprando entre rueda 400 y 700 con DCA, Base ATH=100')
ppc_base_100.round(2)

print('Precio de venta, Salida entre rueda 800/1000, Base ATH=100')
ppv_base_100.round(2)

